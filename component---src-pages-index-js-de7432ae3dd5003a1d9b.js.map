{"version":3,"sources":["webpack:///./src/components/Header.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/homepagelogo.js"],"names":["Header","state","activeItem","render","classes","this","props","react_default","a","createElement","className","heading","gatsby_browser_entry","to","style","textDecoration","index_es","button","key","variant","buttonText","Component","withStyles","padding","marginLeft","fontSize","fontWeight","color","textTransform","keywordsQuery","IndexPage","height","query","data","seo","title","site","siteMetadata","keywords","_4186748501","components_Header","homepagelogo","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","Consumer","staticQueryData","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","styles","fullImage","width","maxWidth","maxHeight","margin","Homepagelogo","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","fluid","placeholderImage","childImageSharp","imgStyle","objectFit","_public_static_d_4247234234_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"2LAmBMA,sJACJC,MAAQ,CAAEC,WAAY,sCAEtBC,OAAA,WAAS,IACCC,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kCAAoCN,EAAQO,SAC3DJ,EAAAC,EAAAC,cAACG,EAAA,KAAD,CAAMC,GAAI,QAASC,MAAO,CAACC,eAAgB,SACzCR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQN,UAAWN,EAAQa,OAAQC,IAAK,QAAQX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYG,QAAS,KAAMT,UAAWN,EAAQgB,YAA9C,eATrCC,aAgBNC,uBA/BA,CACbX,QAAS,CACPY,QAAS,QAEXN,OAAQ,CACNM,QAAS,OACTC,WAAY,QAEdJ,WAAY,CACVK,SAAU,OACVC,WAAY,OACZC,MAAO,QACPC,cAAe,SAmBJN,CAAmBtB,GCd5B6B,EAAa,aAWJC,UAzBG,kBAChBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YAAaI,MAAO,CAACiB,OAAQ,UAC3CxB,EAAAC,EAAAC,cAACG,EAAA,YAAD,CACEoB,MAAOH,EACP1B,OAAQ,SAAA8B,GAAI,OACV1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAKC,MAAOF,EAAKG,KAAKC,aAAaF,MAAOG,SAAUL,EAAKG,KAAKC,aAAaC,YAH/EL,KAAAM,IAMAhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,0CChBJC,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,uCAAAG,IAAAL,EAAAG,EAAAD,EAAA,gCAAAI,IAAA,IAAAC,EAAAP,EAAA,GAAAQ,EAAAR,EAAAS,EAAAF,GAAAG,EAAAV,EAAA,GAAAW,EAAAX,EAAAS,EAAAC,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAAS,EAAAG,GAAAZ,EAAAG,EAAAD,EAAA,yBAAAW,EAAA/C,IAAAkC,EAAAG,EAAAD,EAAA,+BAAAU,EAAA,aAAAZ,EAAAG,EAAAD,EAAA,6BAAAU,EAAA,WAAAZ,EAAAG,EAAAD,EAAA,yBAAAU,EAAA,OAAAZ,EAAAG,EAAAD,EAAA,4BAAAU,EAAA,UAAAZ,EAAAG,EAAAD,EAAA,+BAAAU,EAAA,iBAAAE,EAAAd,EAAA,KAAAe,EAAAf,EAAAS,EAAAK,GAAAd,EAAAG,EAAAD,EAAA,iCAAAa,EAAAjD,IAAA,IAAAkD,EAAAhB,EAAA,IAAAA,EAAAG,EAAAD,EAAA,8BAAAc,EAAA,IAYA,IAAMX,EAAqBY,IAAMC,cAAc,IAEzCZ,EAAc,SAAA1C,GAAK,OACvB4C,EAAA1C,EAAAC,cAACsC,EAAmBc,SAApB,KACG,SAAAC,GACC,OACExD,EAAM2B,MACL6B,EAAgBxD,EAAM0B,QAAU8B,EAAgBxD,EAAM0B,OAAOC,MAEtD3B,EAAMH,QAAUG,EAAMyD,UAC5BzD,EAAM2B,KAAO3B,EAAM2B,KAAKA,KAAO6B,EAAgBxD,EAAM0B,OAAOC,MAGvDiB,EAAA1C,EAAAC,cAAA,uCAaf,SAASqC,IACP,MAAM,IAAIkB,MACR,gVATJhB,EAAYiB,UAAY,CACtBhC,KAAMiC,IAAUC,OAChBnC,MAAOkC,IAAUE,OAAOC,WACxBlE,OAAQ+D,IAAUI,KAClBP,SAAUG,IAAUI,2BCnCtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOvB,IAAMlD,cAAc0E,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,QAIrBV,EAAiBX,UAAY,CAC3Ba,SAAUZ,IAAUqB,MAAM,CACxBL,SAAUhB,IAAUE,OAAOC,aAC1BA,YAGUO,sHChBf,SAASY,EAATX,GAA2D,IAA5CY,EAA4CZ,EAA5CY,YAAaC,EAA+Bb,EAA/Ba,KAAMC,EAAyBd,EAAzBc,KAAMrD,EAAmBuC,EAAnBvC,SAAUH,EAAS0C,EAAT1C,MAChD,OACEyD,EAAApF,EAAAC,cAACoF,EAAA,YAAD,CACE7D,MAAO8D,EACP3F,OAAQ,SAAA8B,GACN,IAAM8D,EACJN,GAAexD,EAAKG,KAAKC,aAAaoD,YACxC,OACEG,EAAApF,EAAAC,cAACuF,EAAAxF,EAAD,CACEyF,eAAgB,CACdP,QAEFvD,MAAOA,EACP+D,cAAa,QAAUjE,EAAKG,KAAKC,aAAaF,MAC9CwD,KAAM,CACJ,CACEQ,KAAI,cACJC,QAASL,GAEX,CACEM,SAAQ,WACRD,QAASjE,GAEX,CACEkE,SAAQ,iBACRD,QAASL,GAEX,CACEM,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASnE,EAAKG,KAAKC,aAAaiE,QAElC,CACEH,KAAI,gBACJC,QAASjE,GAEX,CACEgE,KAAI,sBACJC,QAASL,IAGVQ,OACCjE,EAASkE,OAAS,EACd,CACEL,KAAI,WACJC,QAAS9D,EAASmE,KAAT,OAEX,IAELF,OAAOZ,MAtDlB1D,KAAAyE,IA8DJlB,EAAImB,aAAe,CACjBjB,KAAI,KACJC,KAAM,GACNrD,SAAU,IAGZkD,EAAIvB,UAAY,CACdwB,YAAavB,IAAUE,OACvBsB,KAAMxB,IAAUE,OAChBuB,KAAMzB,IAAU0C,MAChBtE,SAAU4B,IAAU2C,QAAQ3C,IAAUE,QACtCjC,MAAO+B,IAAUE,OAAOC,YAGXmB,MAEf,IAAMM,EAAY,oPChFZgB,EAAS,CACbC,UAAW,CACTC,MAAO,SACPC,SAAU,MACVC,UAAW,MACXC,OAAQ,WAiCGC,IA9BM,WACnB,OACExB,EAAApF,EAAAC,cAAC4G,EAAA,YAAD,CACErF,MAAK,aAaL7B,OAAQ,SAAA8B,GAAI,OACV2D,EAAApF,EAAAC,cAAA,OAAKC,UAAW,mDAAoDI,MAAO,CAAEiB,OAAQ,QACnF6D,EAAApF,EAAAC,cAAC6G,EAAA9G,EAAD,CACE+G,MAAOtF,EAAKuF,iBAAiBC,gBAAgBF,MAC7CzG,MAAOgG,EAAOC,UACdW,SAAU,CAAEC,UAAW,eAnB/B1F,KAAA2F","file":"component---src-pages-index-js-de7432ae3dd5003a1d9b.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Typography, withStyles } from '@material-ui/core'\nimport { Link } from 'gatsby'\n\nconst styles = {\n  heading: {\n    padding: '20px',\n  },\n  button: {\n    padding: '10px',\n    marginLeft: '20px'\n  },\n  buttonText: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    color: 'white',\n    textTransform: 'none'\n  }\n}\nclass Header extends Component {\n  state = { activeItem: 'home' }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <header className={`row d-flex justify-content-end ${classes.heading}`}>\n        <Link to={'/team'} style={{textDecoration: 'none'}}>\n          <Button className={classes.button} key={'team'}><Typography variant={'h5'} className={classes.buttonText}>Team</Typography></Button>\n        </Link>\n      </header>\n    )\n  }\n}\n\nexport default withStyles(styles)(Header)\n","import React from 'react'\nimport { graphql, StaticQuery } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Homepagelogo from '../components/homepagelogo'\nimport Header from '../components/Header'\n\nconst IndexPage = () => (\n  <div className={'container'} style={{height: '100vh'}}>\n    <StaticQuery \n      query={keywordsQuery}\n      render={data => (\n        <SEO title={data.site.siteMetadata.title} keywords={data.site.siteMetadata.keywords} />\n      )}\n    />\n    <Header/>\n    <Homepagelogo/>\n  </div>\n)\n\n\nconst keywordsQuery = graphql`\n  query keywords {\n    site{\n      siteMetadata{\n        title\n        keywords\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Img from 'gatsby-image'\nimport { graphql, StaticQuery } from 'gatsby'\n\n\nconst styles = {\n  fullImage: {\n    width: '1000px',\n    maxWidth: '70%',\n    maxHeight: \"70%\",\n    margin: \"0 auto\",\n  }\n}\nconst Homepagelogo = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          placeholderImage: file(relativePath: { eq: \"logo.png\" }) {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n                presentationWidth\n                presentationHeight\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <div className={'d-flex align-items-center justify-content-center'} style={{ height: '80%'}}>\n          <Img\n            fluid={data.placeholderImage.childImageSharp.fluid}\n            style={styles.fullImage}\n            imgStyle={{ objectFit: 'contain' }}\n          />\n        </div>\n\n      )}\n    />\n  )\n}\n\nexport default Homepagelogo\n"],"sourceRoot":""}