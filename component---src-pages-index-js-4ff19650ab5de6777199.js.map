{"version":3,"sources":["webpack:///./src/components/Header.js","webpack:///./src/components/NewsCard.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/colorscheme.js","webpack:///./src/components/seo.js","webpack:///./src/components/Logo.js"],"names":["styles","heading","padding","button","marginLeft","buttonText","fontSize","textTransform","fontFamily","fontWeight","color","text","logoText","Header","state","activeItem","render","classes","this","props","react_default","a","createElement","className","Logo","gatsby_browser_entry","to","style","textDecoration","index_es","key","variant","Component","withStyles","card","width","backgroundColor","media","objectFit","textAlign","nameTag","positionTag","NewsCard","Card_default","CardMedia_default","query","data","image","images","edges","find","n","node","relativePath","includes","imageSizes","childImageSharp","sizes","gatsby_image_default","alt","_1548138663","CardContent_default","Typography_default","gutterBottom","component","date","body","propTypes","PropTypes","object","isRequired","string","keywordsQuery","IndexPage","height","seo","title","site","siteMetadata","keywords","components_Header","components_NewsCard","news","_4001890912","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","Consumer","staticQueryData","children","Error","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","background","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","fullImage","maxWidth","maxHeight","margin","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","fluid","placeholderImage","imgStyle","_public_static_d_4247234234_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-pages-index-js-4ff19650ab5de6777199.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Typography, withStyles } from '@material-ui/core'\nimport { Link } from 'gatsby'\nimport Logo from './Logo'\nimport { text } from '../colorscheme'\n\nconst styles = {\n  heading: {\n    padding: '20px',\n  },\n  button: {\n    padding: '10px',\n    marginLeft: '20px',\n  },\n  buttonText: {\n    fontSize: '18px',\n    textTransform: 'none',\n    fontFamily: 'Quicksand, sans-serif',\n    fontWeight: 900,\n    color: text,\n  },\n  logoText: {\n    fontFamily: 'Quicksand, sans-serif',\n    fontWeight: 900,\n    color: text,\n    fontSize: '18px'\n  },\n}\nclass Header extends Component {\n  state = { activeItem: 'home' }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <header className={`d-flex align-items-center ${classes.heading}`}>\n        <div className={'col-5 col-sm-2'}>\n          <Logo />\n        </div>\n        <div className={'d-none d-sm-block'}>\n          <Link to={'/team'} style={{textDecoration: 'none'}}><h1 className={classes.logoText}>RC Tech Club</h1></Link>\n        </div>\n        <div className={'ml-auto p-2'}>\n          <Link to={'/team'} style={{ textDecoration: 'none' }}>\n            <Button className={classes.button} key={'team'}>\n              <Typography variant={'h5'} className={classes.buttonText}>\n                Team\n              </Typography>\n            </Button>\n          </Link>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default withStyles(styles)(Header)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport { text } from '../colorscheme'\nimport { graphql, StaticQuery } from 'gatsby'\nimport Card from '@material-ui/core/Card'\nimport Img from 'gatsby-image'\nimport { withStyles } from '@material-ui/core/styles'\nimport CardMedia from '@material-ui/core/CardMedia'\n\nconst styles = {\n  card: {\n    width: '100%',\n    backgroundColor: text,\n  },\n  media: {\n    objectFit: 'cover',\n  },\n  text: {\n    textAlign: 'left',\n    fontFamily: 'Quicksand, sans-serif',\n    fontWeight: 900,\n    color: 'black',\n  },\n  nameTag: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n  },\n  positionTag: {\n    fontSize: '18px',\n  },\n}\n\nconst NewsCard = props => {\n  const { classes } = props\n\n  return (\n    <Card className={classes.card}>\n      <div className={'row d-flex align-items-center'}>\n        <div className={'col-4 p-4'}>\n          <CardMedia>\n            <StaticQuery\n              query={graphql`\n                query {\n                  images: allFile {\n                    edges {\n                      node {\n                        relativePath\n                        name\n                        childImageSharp {\n                          sizes(maxWidth: 600) {\n                            ...GatsbyImageSharpSizes\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              `}\n              render={data => {\n                const image = data.images.edges.find(n => {\n                  return n.node.relativePath.includes(props.image)\n                })\n                if (!image) {\n                  return null\n                }\n\n                const imageSizes = image.node.childImageSharp.sizes\n                return <Img alt={props.alt} sizes={imageSizes} />\n              }}\n            />\n          </CardMedia>\n        </div>\n        <div className={'p-2 col-8'}>\n          <CardContent>\n            <Typography\n              className={`${classes.text} ${classes.nameTag}`}\n              gutterBottom\n              variant=\"h2\"\n              component=\"h2\"\n            >\n              {props.heading}\n            </Typography>\n            <Typography\n              className={`${classes.text} ${classes.positionTag}`}\n              gutterBottom\n              variant=\"h3\"\n              component=\"h3\"\n            >\n              {props.date}\n            </Typography>\n            <Typography className={classes.text} component=\"p\">\n              {props.body}\n            </Typography>\n          </CardContent>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nNewsCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n  image: PropTypes.string.isRequired,\n  heading: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n}\n\nexport default withStyles(styles)(NewsCard)\n","import React from 'react'\nimport { graphql, StaticQuery } from 'gatsby'\nimport SEO from '../components/seo'\n\nimport Header from '../components/Header'\nimport NewsCard from '../components/NewsCard'\n\nconst IndexPage = props => (\n  <div>\n    <StaticQuery\n      query={keywordsQuery}\n      render={data => {\n\n        return (\n          <div className={'container'} style={{ height: '100vh' }}>\n            <SEO\n              title={data.site.siteMetadata.title}\n              keywords={data.site.siteMetadata.keywords}\n            />\n            <Header />\n            <div className={'row'}>\n              <NewsCard\n                heading={data.site.siteMetadata.news[0].title}\n                date={data.site.siteMetadata.news[0].date}\n                body={data.site.siteMetadata.news[0].body}\n                image={data.site.siteMetadata.news[0].image}\n              />\n            </div>\n          </div>\n        )\n      }}\n    />\n  </div>\n)\n\nconst keywordsQuery = graphql`\n  query keywords {\n    site {\n      siteMetadata {\n        title\n        keywords\n        news {\n          title\n          date\n          body\n          image\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","module.exports = {\n  'background': '#2F4A55',\n  'text': '#E1E8F0'\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Img from 'gatsby-image'\nimport { graphql, StaticQuery } from 'gatsby'\n\n\nconst styles = {\n  fullImage: {\n    width: '100%',\n    maxWidth: '70%',\n    maxHeight: \"70%\",\n    margin: \"0 auto\",\n  }\n}\nconst Logo = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          placeholderImage: file(relativePath: { eq: \"logo.png\" }) {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n                presentationWidth\n                presentationHeight\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <div className={'d-flex align-items-center justify-content-center'}>\n          <Img\n            fluid={data.placeholderImage.childImageSharp.fluid}\n            style={styles.fullImage}\n            imgStyle={{ objectFit: 'contain' }}\n          />\n        </div>\n\n      )}\n    />\n  )\n}\n\nexport default Logo\n"],"sourceRoot":""}